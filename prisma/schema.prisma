// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String
  isAdmin       Boolean   @map(name: "is_admin")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  parkingSpots  Reservations[]
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int  @map(name: "organization_id")
  @@map(name: "user")
}

model ParkingLot {
  id  Int            @id @default(autoincrement())
  name String
  numberOfSpots Int  @map(name: "number_of_spots")
  prefix  String
  spots ParkingSpot[]
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int  @map(name: "organization_id")
  @@map(name: "parking_lot")
}

model ParkingSpot {
  id  Int            @id @default(autoincrement())
  name String
  parkingLot ParkingLot @relation(fields: [parkingLotId], references: [id])
  parkingLotId Int  @map(name: "parking_lot_id")
  prefix  String
  isReserved Boolean
  user Reservations[]
  @@map(name: "parking_spot")
}

model Reservations {
  // add it's own id to be able to add same userIds and spotIds for different dates
  id  Int @id @default(autoincrement())
  user  User  @relation(fields: [userId], references: [id])
  userId Int
  parkingSpot ParkingSpot @relation(fields: [spotId], references: [id])
  spotId Int  @map(name: "spot_id")
  // if this is not working for storing date only -- convert it to string
  reservedAt DateTime @db.Date @map("reserved_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
}

model Organization {
  id  Int @id @default(autoincrement())
  name String
  users User[]
  parkingLots ParkingLot[]
  slackIntegration  SlackIntegration?
}

model SlackIntegration {
  id  Int @id @default(autoincrement())
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int @unique @map(name: "organization_id")
}